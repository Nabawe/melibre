+ Names
+ Abstract
+ Multithread, Async
+ Class : Element
+ Arrays all the Way
+ Iterator
+ array mutation, splice vs delete
+ Branches vs Nodes
+ Sparce Arrays
+ Modeling
+ Experiment Adding String Properties to Arrays


+ Names
    TidyTree, NearTree, InfinityCupboard, TaggedCupboard, chest of drawers, stack, accumulate, dresser?
+


+ Abstract
    Explicar origen, problema ( parsing FVE Field Value Expressions linked by logic ), la motivacion, posibles utilidades, etc.

    Counter Arguments :
        Q muchas veces termina siendo mas eficiente transcodear el formato de una querry en otro simplemente tratandola con string manipulation en vez d tener q descomponer la logica.
+


+ Multithread, Async
    ! One might need to Freeze and UnFreeze and object when traversing it if multithread, async behaviour is involved
+


+ Class : Element
    tal vez crear una clase Element q normalmente solo guarda el value y se convierte en un array al tener un child pero creo q es peor ya q siempre va a ser alguna estructura mas grande q una Array y va a consumir mas CPU time
+


+ Arrays all the Way
    Para guardar un dato se guardaría en [].value pero cada branch es simplemente una array vacía en su expresión mínima, de esta manera las relaciones : parent, sibling, children quedan actualizadas automáticamente y también recuerdan un orden

    Aún así crear la clase branch o node

    Por ahi sea mejor usar Maps o WeakMaps en vez de arrays, supuestamente estan optimizados para ser modificados continuamente, al menos la doc dice q los objetos no lo estan pero no dice de las arrays ( y ademas todo es deribado de Object en JS... ).
+


+ Iterator
    Define an iterator that iterates over the whole tree in an ordered way that allows it to "be read" and keep hierarchy and etc.
+


+ array mutation, splice vs delete
    splice and other methods are to be used when modding an array and NOT delete

    delete though could be used to delete the 0 index and create an SPARCEARRAY check MDN delete

    It seams I will need to create a custom method that creates a deep-copy then fixes the new references coz delete and such methods seam to leave blank slots.
+


+ Branches vs Nodes
    meditar si la conceptualizacion es a base d nodos o branches

    Decirle a Guido un ejemplo de cosas para pensar es q puedo preguntarle a un Node q una Branch no pueda responder, por ejemplo como encontrar los silblings y ver q concepto funciona mejor para modelar ( explicar q es modelar, creacion de classes ) o si es necesario usar los 2 conceptos, q es lo q estoy evitando, para q todo sea bien lean.

    Un nodo pierde el weight entre conexiones al crear un nodo nuevo y en contraste una rama mantiene identidad y valor ( imaginar q a una rama gorda le sale una rama fina )

    Las ramas permiten visualizar los valores q guardan y en este caso buscan ser más permanentes.

    Los nodos probablemente pueden almacenar una diversidad mayor de información o sea más variedad de tipo de conceptos de información

    pensar sobre lo de distancia al centro y otras cosas reprecentables por el diametro del nodo, es una analogia, una visualizacion de una propiedad igual y seguro se podría hacer lo mismo con una branch. su ancho?
+


+ Sparce Arrays
    Revisar en MDN q es lo q pierden las array si definía custom props estoy casi seguro q está en la pag mdn arrays.

    const arr = [1, 2, , , 5]; // Create a sparse array
    ! Spreading into an Array
        const another = [...arr]; // "another" is [ 1, 2, undefined, undefined, 5 ]
        !!! Spreading into an Object uses property enumeration, not the array's iterator
            const objectSpread = { ...arr }; // { '0': 1, '1': 2, '4': 5 }

    But in others (most notably array iteration methods), empty slots are skipped.
        ! const hasFalsy = arr.some((k) => !k); // false

        * Property enumeration
            const keys = Object.keys(arr); // [ '0', '1', '4' ]
            for (const key in arr)
                console.log(key);

        * const mapped = arr.map((i) => i + 1); // [ 2, 3, <2 empty items>, 6 ]
        * arr.forEach((i) => console.log(i)); // 1 2 5
        * const filtered = arr.filter(() => true); // [ 1, 2, 5 ]

    Hacer mas prolijo y funcional el resumen? tal vez mejor skim y encontrar una solucion mas universal, pensar menos en esto, crear la clase y luego ver los problemas teniendo una base teorica general.

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Indexed_collections#sparse_arrays
        poorly writen just check the specific section

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#array_methods_and_empty_slots
+


+ Modeling
    Otros métodos podrían ser:
    +Continue dónde crea una branch sibling
    +Spawn dónde crea una branch child
    +spawnUncle donde crea una branch sibling al parent

    Creo q es mejor q todos empiecen con spawn

    O sea son metodos q permiten el ir haciendo crecer el árbol de manera lógica e ir guardando valores.

    Otros métodos:
    Open,close,grow ... Branch q equivalen a ( ) newSibling

    openNewBranch, closeLastOpenedBranch
+


+ f_parseLogic
    ask claude about coping, remembering and modifying arrays, about shallow vs deep

    Franco Chiavarini, [09/10/2024 5:59 am]
    Recordar pos con array o una var q sea current.

    branch[lvl][twig] = [];
    branch[lvl][twig].insertionPos

    vs

    current
    insertionPos


    luego abajo:

    if lvl === 0 o_Tree.push( realChar )
    else currentParent.push( realChar)
    OR
    else branch[lvl][twig].push ( realChar)


    Luego arriba en )
    Retorna el puntero a la array q sea su padre

    currentBranch = [];
    growingBranches[lvl][twig] = currentBranch;
    currentBranch.insertionPos = posición en la array parent; (ver q se guarde en la array original y no en el puntero)
    currentTwig = twig;

    id o twig ya q puede haber más de un set de paréntesis por Branch.

    Ver si delete causa reindexacion
+


+ Experiment Adding String Properties to Arrays
    See what happens with different iteration methods, fors, etc.
+
